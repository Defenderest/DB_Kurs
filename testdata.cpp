#include "testdata.h"
#include "database.h" // Потрібно для доступу до m_db та executeQuery/executeInsertQuery
#include <QDebug>
#include <QSqlDatabase>
#include <QSqlError>
#include <QSqlQuery>
#include <QVariant>
#include <QVector>
#include <QRandomGenerator>
#include <QSet>
#include <QSqlRecord>
#include <QMap>
#include <QCryptographicHash>

// --- Реалізація допоміжних функцій генерації (перенесено з database.cpp) ---

QDate randomDate(const QDate &minDate, const QDate &maxDate) {
    qint64 minJulian = minDate.toJulianDay();
    qint64 maxJulian = maxDate.toJulianDay();
    qint64 randomJulian = QRandomGenerator::global()->bounded(minJulian, maxJulian + 1);
    return QDate::fromJulianDay(randomJulian);
}

QDateTime randomDateTime(const QDateTime &minDateTime, const QDateTime &maxDateTime) {
    qint64 minSecs = minDateTime.toSecsSinceEpoch();
    qint64 maxSecs = maxDateTime.toSecsSinceEpoch();
    qint64 randomSecs = QRandomGenerator::global()->bounded(minSecs, maxSecs + 1);
    return QDateTime::fromSecsSinceEpoch(randomSecs);
}

// --- Реалізація функції populateTestData (перенесено з database.cpp) ---

bool populateTestData(DatabaseManager *dbManager, int numberOfRecords)
{
    // Перевірка вказівника на dbManager
    if (!dbManager) {
        qCritical() << "populateTestData: DatabaseManager pointer is null!";
        return false;
    }
    // Використовуємо dbManager для доступу до m_isConnected та m_db
    if (!dbManager->m_isConnected || !dbManager->m_db.isOpen()) {
        qWarning() << "Неможливо заповнити дані: немає активного з'єднання з БД.";
        return false;
    }
    if (numberOfRecords <= 0) {
        qWarning() << "Кількість записів для генерації повинна бути позитивною.";
        return false;
    }

    // Начинаем транзакцию для вставки данных (використовуємо dbManager->m_db)
    if (!dbManager->m_db.transaction()) {
        qCritical() << "Не вдалося почати транзакцію для заповнення даних:" << dbManager->m_db.lastError().text();
        return false;
    }
    qInfo() << "Транзакція для заповнення даних розпочата...";

    // Створюємо запит, використовуючи з'єднання з dbManager
    QSqlQuery query(dbManager->m_db);
    bool success = true;
    QVariant lastId; // Для зберігання останнього вставленого ID

    // --- Списки для генерації КЛІЄНТІВ та ЗАМОВЛЕНЬ (залишаємо) ---
    QStringList firstNames = {"Олександр", "Андрій", "Сергій", "Володимир", "Дмитро", "Максим", "Іван", "Артем", "Денис", "Віктор", "Олена", "Наталія", "Тетяна", "Юлія", "Ірина", "Анна", "Оксана", "Марія", "Світлана", "Катерина"};
    QStringList lastNames = {"Мельник", "Шевченко", "Коваленко", "Бондаренко", "Бойко", "Ткаченко", "Кравченко", "Ковальчук", "Коваль", "Олійник", "Шевчук", "Поліщук", "Лисенко", "Бондар", "Мороз", "Марченко", "Ткачук", "Павленко", "Савченко", "Іванова"};
    QStringList cities = {"Київ", "Харків", "Одеса", "Дніпро", "Львів", "Запоріжжя", "Кривий Ріг", "Миколаїв", "Вінниця", "Херсон"};
    QStringList streets = {"вул. Хрещатик", "просп. Свободи", "вул. Сумська", "вул. Пушкінська", "бул. Шевченка", "вул. Городоцька", "вул. Дерибасівська", "просп. Науки", "вул. Соборна", "вул. Центральна"};
    QStringList orderStatuses = {"Очікує підтвердження", "В обробці", "Комплектується", "Передано до служби доставки", "Надіслано", "Доставлено", "Скасовано"};
    QStringList paymentMethods = {"Карткою онлайн", "Готівкою при отриманні", "Переказ на рахунок"};

    // --- Реальні дані (використовуємо структури з testdata.h) ---
    QList<PublisherData> publishers = {
        {"А-ба-ба-га-ла-ма-га", "Київ, вул. Басейна, 1/2А", -1},
        {"Видавництво Старого Лева", "Львів, вул. Старознесенська, 24-26", -1},
        {"Клуб Сімейного Дозвілля", "Харків, вул. Плеханівська, 117", -1},
        {"Наш Формат", "Київ, пров. Алли Горської, 5", -1},
        {"Фабула", "Харків, вул. Сумська, 1", -1},
        {"Vivat", "Харків, вул. Гоголя, 2А", -1},
        {"Penguin Books", "London, UK", -1},
        {"HarperCollins", "New York, USA", -1}
    };

    QList<AuthorData> authors = {
        // Українські класики (3)
        {"Тарас", "Шевченко", QDate(1814, 3, 9), "українець", "D:\\projects\\DB_Kurs\\QtAPP\\author_img\\Taras_Shevchenko.jpg",
         "Тарас Шевченко (1814-1861) – видатний український поет, художник, мислитель і громадський діяч. Народився у кріпацькій родині, завдяки таланту та підтримці викупився з кріпацтва. Навчався в Петербурзькій Академії мистецтв. Його поетична збірка «Кобзар» стала символом українського національного відродження, оспівуючи історію, культуру та прагнення народу до свободи. За свою антицарську діяльність та участь у Кирило-Мефодіївському братстві був засланий на довгі роки солдатом із забороною писати й малювати. Попри це, продовжував таємно творити. Його спадщина включає геніальні поетичні твори, прозу, драматургію та значний доробок у живописі та графіці. Шевченко вважається основоположником нової української літератури та національним пророком.", -1},
        {"Леся", "Українка", QDate(1871, 2, 25), "українка", "D:\\projects\\DB_Kurs\\QtAPP\\author_img\\Lesia_Ukrainka.jpg",
         "Леся Українка (справжнє ім'я Лариса Косач-Квітка, 1871-1913) – видатна українська письменниця, перекладачка, культурна діячка. Народилася в інтелігентній родині, отримала чудову домашню освіту, знала багато мов. З дитинства хворіла на туберкульоз кісток, що змушувало її багато подорожувати в пошуках лікування, але не зламало її духу. Авторка глибоких поетичних збірок («На крилах пісень», «Думи і мрії», «Відгуки»), драматичних поем («Одержима», «Кассандра», «В катакомбах», «Бояриня») та драми-феєрії «Лісова пісня», яка стала вершиною її творчості. У своїх творах Леся Українка піднімала теми національного визволення, боротьби за соціальну справедливість, ролі митця у суспільстві, сили людського духу. Її творчість відзначається інтелектуалізмом, психологізмом та новаторством.", -1},
        {"Іван", "Франко", QDate(1856, 8, 27), "українець", "D:\\projects\\DB_Kurs\\QtAPP\\author_img\\Ivan_Franko.jpg",
         "Іван Франко (1856-1916) – видатний український письменник, поет, публіцист, учений, громадський і політичний діяч. Народився в родині коваля на Галичині. Навчався у Львівському та Чернівецькому університетах, здобув ступінь доктора філософії у Відні. Франко – титанічна постать в українській культурі, автор величезної кількості творів у різних жанрах: поезії (збірки «Зів'яле листя», «Мій Ізмарагд», поема «Мойсей»), прози (повісті «Захар Беркут», «Борислав сміється», «Украдене щастя»), драматургії, наукових праць з історії, літературознавства, етнографії. Активно займався політичною діяльністю, був одним із засновників Русько-української радикальної партії. Зазнав переслідувань та арештів з боку австро-угорської влади. Його творчість пронизана ідеями гуманізму, патріотизму та віри в майбутнє українського народу.", -1},
        // Зарубіжні (9)
        {"George", "Orwell", QDate(1903, 6, 25), "британець", "D:\\projects\\DB_Kurs\\QtAPP\\author_img\\George_Orwell.jpg",
         "Джордж Орвелл (справжнє ім'я Ерік Артур Блер, 1903-1950) – видатний англійський письменник і публіцист. Народився в Індії, навчався в Ітоні. Служив у колоніальній поліції в Бірмі, що сформувало його антиімперіалістичні погляди. Брав участь у Громадянській війні в Іспанії на боці республіканців, де був поранений. Світову славу Орвеллу принесли алегорична повість «Колгосп тварин» (1945), що є гострою сатирою на сталінський режим, та роман-антиутопія «1984» (1949), який став пророчим попередженням про небезпеку тоталітаризму, державного контролю та маніпуляції свідомістю. У своїх творах Орвелл послідовно виступав проти будь-яких форм гноблення, захищав принципи демократії, свободи слова та соціальної справедливості. Його роботи справили величезний вплив на світову літературу та політичну думку XX століття.", -1},
        {"J.K.", "Rowling", QDate(1965, 7, 31), "британка", "D:\\projects\\DB_Kurs\\QtAPP\\author_img\\J.K.-Rowling-2021.jpg",
         "Джоан Роулінг (нар. 1965) – британська письменниця, сценаристка та продюсерка, авторка всесвітньо відомої серії романів про Гаррі Поттера. Народилася в Єйті, графство Глостершир. Вивчала французьку мову та класичну філологію в Ексетерському університеті. Ідея написати книгу про хлопчика-чарівника виникла у неї під час поїздки на потязі з Манчестера до Лондона. Перша книга серії, «Гаррі Поттер і філософський камінь», була опублікована в 1997 році і мала шалений успіх. Наступні шість книг продовжили історію, створивши унікальний магічний світ і завоювавши мільйони шанувальників різного віку по всьому світу. Серія була перекладена багатьма мовами, екранізована та стала культурним феноменом. Роулінг також пише романи для дорослих під власним ім'ям та псевдонімом Роберт Ґалбрейт. Активно займається благодійністю.", -1},
        {"Stephen", "King", QDate(1947, 9, 21), "американець", "D:\\projects\\DB_Kurs\\QtAPP\\author_img\\Stephen_King.jpg",
         "Стівен Кінг (нар. 1947) – американський письменник, визнаний «королем жахів», автор понад 60 романів та близько 200 оповідань, багато з яких стали бестселерами та були екранізовані. Народився в Портленді, штат Мен. Закінчив Університет Мену за спеціальністю «англійська мова». Працював вчителем англійської мови, перш ніж здобув популярність з публікацією свого першого роману «Керрі» (1974). Його твори охоплюють жанри жахів, трилера, фентезі, наукової фантастики та містики. Серед найвідоміших робіт – «Сяйво», «Воно», «Кладовище домашніх тварин», «Мізері», «Зелена миля», «Протистояння», серія «Темна Вежа». Кінга вирізняє майстерність у створенні напруженої атмосфери, глибокий психологізм персонажів та дослідження темних сторін людської природи, страхів та соціальних проблем.", -1},
        {"Haruki", "Murakami", QDate(1949, 1, 12), "японець", "D:\\projects\\DB_Kurs\\QtAPP\\author_img\\haruki-murakami.jpg",
         "Харукі Муракамі (нар. 1949) – один із найпопулярніших сучасних японських письменників та перекладачів. Народився в Кіото, виріс у Кобе. Вивчав театральне мистецтво в Університеті Васеда в Токіо. До початку письменницької кар'єри керував джаз-баром. Його перший роман «Слухай пісню вітру» (1979) отримав престижну літературну премію. Світову популярність здобув завдяки романам «Полювання на овець», «Норвезький ліс», «Хроніки заводного птаха», «Кафка на пляжі», «1Q84». Твори Муракамі часто поєднують реалізм із сюрреалістичними елементами, досліджують теми самотності, втрати, пошуку ідентичності, впливу західної культури (особливо музики та літератури) на японське суспільство. Його стиль характеризується меланхолійною атмосферою, гумором та увагою до деталей повсякденного життя.", -1},
        {"Neil", "Gaiman", QDate(1960, 11, 10), "британець", "D:\\projects\\DB_Kurs\\QtAPP\\author_img\\Neil_Gaiman.jpg",
         "Ніл Гейман (нар. 1960) – британський письменник, автор романів, графічних романів, коміксів, сценаріїв для кіно та телебачення. Народився в Портчестері. Починав кар'єру як журналіст. Здобув визнання завдяки інноваційній серії коміксів «Пісочний чоловік» (The Sandman). Його прозові твори, такі як «Американські боги», «Зоряний пил», «Кораліна», «Океан у кінці вулиці», «Небудь-де», часто поєднують елементи фентезі, міфології, жахів та сучасної казки. Гейман майстерно переосмислює старі міфи та легенди, створюючи оригінальні та захопливі світи. Його роботи відзначені численними престижними нагородами, включаючи премії Г'юго, Неб'юла, Брема Стокера та медаль Ньюбері. Гейман відомий своїм багатим образним стилем, чорним гумором та вмінням розповідати історії, які захоплюють читачів різного віку.", -1},
        {"Margaret", "Atwood", QDate(1939, 11, 18), "канадка", "D:\\projects\\DB_Kurs\\QtAPP\\author_img\\Margaret_Atwood.jpg",
         "Маргарет Етвуд (нар. 1939) – видатна канадська письменниця, поетеса, літературний критик та екоактивістка. Народилася в Оттаві. Навчалася в Торонтському університеті та Редкліфф-коледжі Гарвардського університету. Авторка понад 50 книг: романів, поетичних збірок, дитячої літератури, критичних есе. Найвідомішим її твором є роман-антиутопія «Оповідь служниці» (1985), який здобув світове визнання та був неодноразово екранізований. Інші знакові романи – «Сліпий убивця» (Букерівська премія 2000), «Орикс і Деркач», «Рік потопу», «Заповіти» (Букерівська премія 2019). У своїх творах Етвуд часто досліджує теми гендерної нерівності, політичного гноблення, екологічних катастроф, влади мови та міфів. Її стиль відзначається інтелектуалізмом, іронією та глибоким психологізмом.", -1},
        {"Yuval Noah", "Harari", QDate(1976, 2, 24), "ізраїльтянин", "D:\\projects\\DB_Kurs\\QtAPP\\author_img\\Yuval Noah_Harari.jpg",
         "Юваль Ной Харарі (нар. 1976) – ізраїльський історик, філософ, професор Єврейського університету в Єрусалимі. Народився в Кір'ят-Аті. Здобув докторський ступінь в Оксфордському університеті. Спеціалізується на всесвітній історії, середньовічній історії та військовій історії. Світову популярність здобув завдяки науково-популярним книгам «Sapiens: Людина розумна. Коротка історія людства» (2011), «Homo Deus: Людина божественна. Коротка історія майбутнього» (2015) та «21 урок для 21 століття» (2018). У своїх роботах Харарі аналізує минуле людства, досліджує його сучасний стан та розмірковує над майбутніми викликами, пов'язаними з розвитком біотехнологій та штучного інтелекту. Його книги перекладені десятками мов і стали міжнародними бестселерами, викликавши широкі дискусії про історію, еволюцію та майбутнє Homo sapiens.", -1},
        {"Andrzej", "Sapkowski", QDate(1948, 6, 21), "поляк", "D:\\projects\\DB_Kurs\\QtAPP\\author_img\\Andrzej_Sapkowski.jpg",
         "Анджей Сапковський (нар. 1948) – польський письменник-фантаст, найбільш відомий завдяки фентезійній сазі «Відьмак». Народився в Лодзі. Вивчав економіку, працював у сфері зовнішньої торгівлі. Літературну кар'єру розпочав з перекладів наукової фантастики. Перше оповідання про відьмака Ґеральта з Рівії було опубліковане в 1986 році в журналі «Fantastyka» і здобуло велику популярність. Згодом Сапковський написав дві збірки оповідань («Останнє бажання», «Меч Призначення») та п'ять романів («Кров ельфів», «Час погорди», «Хрещення вогнем», «Вежа Ластівки», «Володарка Озера»), що склали сагу про Відьмака. Цикл вирізняється похмурою атмосферою, моральною неоднозначністю, оригінальним переосмисленням слов'янської міфології та класичних казок, а також харизматичними персонажами. Сага здобула культовий статус, була екранізована та лягла в основу популярних відеоігор.", -1},
        {"George R.R.", "Martin", QDate(1948, 9, 20), "американець", "D:\\projects\\DB_Kurs\\QtAPP\\author_img\\George_RR_Martin.jpg",
         "Джордж Р. Р. Мартін (нар. 1948) – американський письменник-фантаст, сценарист і продюсер, автор епічної фентезі-саги «Пісня льоду й полум'я», яка лягла в основу культового телесеріалу «Гра престолів». Народився в Байонні, штат Нью-Джерсі. Закінчив Північно-Західний університет за спеціальністю «журналістика». Починав з написання науково-фантастичних оповідань, працював сценаристом на телебаченні. Перший роман циклу «Пісня льоду й полум'я» – «Гра престолів» – вийшов у 1996 році. Сага відзначається масштабністю, реалістичністю, складними політичними інтригами, великою кількістю детально прописаних персонажів та несподіваними сюжетними поворотами, включаючи раптову загибель головних героїв. Мартін створив похмурий і жорстокий світ, де магія існує, але не є визначальною силою. Його творчість справила значний вплив на розвиток жанру епічного фентезі.", -1},
        {"J.R.R.", "Tolkien", QDate(1892, 1, 3), "британець", "D:\\projects\\DB_Kurs\\QtAPP\\author_img\\Tolkien.jpg",
         "Джон Рональд Руел Толкін (1892-1973) – видатний англійський письменник, поет, філолог, професор Оксфордського університету, вважається батьком сучасного фентезі. Народився в Блумфонтейні (сучасна ПАР), але більшу частину життя провів в Англії. Глибоко вивчав давньоанглійську та середньоанглійську мови, міфологію Північної Європи. Світову славу Толкіну принесли повість «Гобіт, або Туди і звідти» (1937) та монументальний роман-епопея «Володар Перснів» (1954-1955). Він створив неймовірно деталізований вигаданий світ Середзем'я з власною географією, історією, народами, мовами та міфологією. Його твори досліджують теми боротьби добра зі злом, героїзму, дружби, спокуси владою, індустріалізації та збереження природи. Толкін також є автором «Сильмариліону» (виданий посмертно), що описує космогонію та давню історію Середзем'я. Його спадщина справила величезний вплив на світову культуру.", -1}
    };

    QList<BookData> books = {
        // Українські класики (6 книг)
        {"Кобзар", "978-966-7047-36-8", QDate(1840, 1, 1), "А-ба-ба-га-ла-ма-га", 300.00, 150,
         "«Кобзар» Тараса Шевченка – це не просто збірка поетичних творів, це серце української літератури та душа нації. Вперше виданий у 1840 році, він став символом боротьби за свободу, національну ідентичність та людську гідність. Книга містить найвідоміші поеми та вірші Шевченка, такі як «Катерина», «Гайдамаки», «Сон», «Заповіт» та багато інших. Кожен рядок пронизаний глибоким патріотизмом, болем за долю України та її народу, вірою у краще майбутнє. Шевченко майстерно змальовує історичні події, життя простих людей, їхні радощі та страждання. Його мова – багата, образна, мелодійна – торкається найглибших струн душі. «Кобзар» – це книга, яка надихала покоління українців на боротьбу, формувала національну свідомість і залишається актуальною й донині. Вона є обов'язковою для прочитання кожному, хто хоче зрозуміти історію, культуру та дух України. Це вічний пам'ятник генію українського народу.",
         "українська", 704, "D:\\projects\\DB_Kurs\\QtAPP\\cover_img\\kobzar.jpg", {"Шевченко"}, "Класика"},
        {"Гайдамаки", "978-966-03-4689-0", QDate(1841, 1, 1), "Видавництво Старого Лева", 180.00, 80,
         "«Гайдамаки» – одна з найвизначніших поем Тараса Шевченка, що змальовує трагічні та героїчні події Коліївщини – великого народного повстання 1768 року проти польсько-шляхетського панування на Правобережній Україні. Поема вражає своєю епічною масштабністю, динамізмом та глибоким психологізмом. Шевченко не лише відтворює історичний контекст, але й проникає у внутрішній світ героїв – відважних гайдамаків, які борються за волю та справедливість, та їхніх супротивників. Центральною фігурою є Ярема Галайда, чия особиста драма переплітається з долею всього народу. Поет майстерно використовує фольклорні мотиви, народні пісні та перекази, що надає твору особливої автентичності та емоційної сили. «Гайдамаки» – це не просто історична хроніка, а й глибоке філософське осмислення тем свободи, помсти, жертовності та національної єдності. Поема є важливим твором української літератури, що розкриває складні сторінки історії та незламний дух народу.",
         "українська", 160, "D:\\projects\\DB_Kurs\\QtAPP\\cover_img\\gaidamaki.jpg", {"Шевченко"}, "Класика"},
        {"Лісова пісня", "978-617-679-191-9", QDate(1911, 1, 1), "Видавництво Старого Лева", 220.00, 100,
         "«Лісова пісня» – шедевр української драматургії, драма-феєрія Лесі Українки, що зачаровує своєю поетичністю, глибиною символізму та філософським змістом. Твір розповідає про трагічне кохання лісової мавки Мавки та людського хлопця Лукаша. Їхні стосунки розгортаються на тлі мальовничої волинської природи, яка постає не просто декорацією, а повноцінним дійовим персонажем, сповненим таємниць та магії. Леся Українка майстерно протиставляє два світи: гармонійний, одухотворений світ природи, втілений в образах лісових істот, та прагматичний, часто жорстокий світ людей. Конфлікт між цими світами, між вічним і тимчасовим, духовним і матеріальним, є центральним у творі. «Лісова пісня» – це гімн красі природи, чистому коханню та свободі духу. П'єса сповнена глибоких роздумів про сенс життя, мистецтво, вірність і зраду. Вона залишається одним із найулюбленіших творів української літератури, що не втрачає своєї актуальності та чарівності.",
         "українська", 256, "D:\\projects\\DB_Kurs\\QtAPP\\cover_img\\lisova.jpg", {"Українка"}, "Класика"},
        {"Камінний господар", "978-966-10-5500-7", QDate(1912, 1, 1), "А-ба-ба-га-ла-ма-га", 190.00, 70,
         "«Камінний господар» – одна з найвідоміших драматичних поем Лесі Українки, що є оригінальною інтерпретацією вічного образу Дон Жуана. На відміну від традиційних трактувань, де Дон Жуан постає лише як спокусник і розпусник, у Лесі Українки він – Командор, сильна, вольова особистість, що прагне влади та утвердження власного «я». Його головною метою є не стільки кохання, скільки підкорення, руйнація усталених норм і традицій. Центральним є конфлікт між Командором та Донною Анною, яка втілює консервативні цінності та моральні принципи. Їхнє протистояння – це боротьба не лише двох характерів, а й двох світоглядів. Поема насичена глибокими філософськими роздумами про свободу волі, відповідальність, ціну влади та сенс людського існування. Леся Українка майстерно використовує символіку та психологізм, створюючи напружену атмосферу та багатогранні образи. «Камінний господар» – це складний, інтелектуальний твір, що спонукає до роздумів і залишає незабутнє враження.",
         "українська", 128, "D:\\projects\\DB_Kurs\\QtAPP\\cover_img\\kaministiy_gospodar.jpg", {"Українка"}, "Класика"},
        {"Захар Беркут", "978-966-03-5112-2", QDate(1883, 1, 1), "А-ба-ба-га-ла-ма-га", 250.00, 120,
         "«Захар Беркут» – визначна історична повість Івана Франка, що переносить читача у XIII століття, в часи героїчної боротьби карпатської громади Тухля проти монгольської навали. В центрі твору – мудрий та відважний ватажок тухольців Захар Беркут, який втілює ідеал народного лідера, що ставить громадські інтереси вище за особисті. Повість майстерно поєднує захопливий сюжет, яскраві описи побуту та звичаїв гірського населення, та глибокі роздуми про патріотизм, єдність, свободу та зраду. Франко змальовує не лише зовнішню боротьбу з ворогом, але й внутрішні конфлікти, зокрема протистояння між Захаром Беркутом та боярином Тугаром Вовком, який заради власних амбіцій готовий зрадити свій народ. Особливої уваги заслуговує лінія кохання сина Захара, Максима, та дочки Тугара Вовка, Мирослави, яка символізує можливість примирення та єднання. «Захар Беркут» – це твір про силу народного духу, важливість згуртованості та вірності рідній землі, що залишається актуальним і сьогодні.",
         "українська", 320, "D:\\projects\\DB_Kurs\\QtAPP\\cover_img\\zahar_berkut.jpg", {"Франко"}, "Класика"},
        {"Украдене щастя", "978-617-569-098-1", QDate(1893, 1, 1), "Видавництво Старого Лева", 170.00, 90,
         "«Украдене щастя» – одна з найсильніших соціально-психологічних драм української літератури, написана Іваном Франком. П'єса розкриває трагічну історію любовного трикутника в галицькому селі кінця XIX століття. Головні герої – Анна, її чоловік Микола Задорожний та її колишній коханий Михайло Гурман – опиняються у вирі складних почуттів, соціальних умовностей та особистих трагедій. Франко майстерно показує, як суспільні норми, бідність та людська підступність руйнують долі та крадуть можливість простого людського щастя. Драма вражає глибиною психологічного аналізу персонажів, їхніх внутрішніх переживань, сумнівів та пристрастей. Кожен герой – це складна особистість зі своєю правдою та своїм болем. Мова твору – жива, народна, сповнена емоцій та драматизму. «Украдене щастя» – це гостра критика соціальної несправедливості та водночас глибоке дослідження людської душі, її прагнення до любові та щастя всупереч усім перешкодам. П'єса залишається актуальною і сьогодні, змушуючи замислитися над вічними питаннями.",
         "українська", 192, "D:\\projects\\DB_Kurs\\QtAPP\\cover_img\\ukradene_shastia.jpg", {"Франко"}, "Класика"},
        // Зарубіжні автори (12 книг)
        {"1984", "978-0-452-28423-4", QDate(1949, 6, 8), "Penguin Books", 150.00, 100,
         "«1984» Джорджа Орвелла – це моторошний і пророчий роман-антиутопія, що став класикою світової літератури. Опублікований у 1949 році, він змальовує жахливий світ тоталітарної держави Океанії, де панує всевладний режим на чолі з таємничим Великим Братом. Партія контролює кожен аспект життя громадян, від їхніх дій до думок, використовуючи постійний нагляд через телеекрани, поліцію думок та новомову – мову, створену для обмеження свободи мислення. Головний герой, Вінстон Сміт, працює в Міністерстві Правди, переписуючи історію відповідно до поточної лінії партії. Однак у глибині душі він ненавидить систему і починає вести таємний щоденник, що є смертельно небезпечним злочином. Його бунт, пошук правди та заборонене кохання з Джулією стають центральною темою роману. «1984» – це потужне попередження про небезпеку тоталітаризму, втрату індивідуальності, маніпуляцію інформацією та важливість свободи думки. Книга залишається надзвичайно актуальною, змушуючи замислюватися над сучасними суспільними процесами.",
         "англійська", 328, "D:\\projects\\DB_Kurs\\QtAPP\\cover_img\\1984.jpg", {"Orwell"}, "Наукова фантастика"},
        {"Animal Farm", "978-0-451-52634-2", QDate(1945, 8, 17), "Penguin Books", 120.00, 120,
         "«Колгосп тварин» (Animal Farm) Джорджа Орвелла – це гостра сатирична алегорія, що викриває події, які призвели до Російської революції 1917 року та подальшого встановлення сталінського режиму в Радянському Союзі. Написана у формі казки про тварин, які виганяють свого жорстокого господаря, фермера Джонса, і намагаються створити власне суспільство рівності та справедливості, книга майстерно показує, як ідеали революції поступово спотворюються. Влада на фермі переходить до свиней, які виявляються ще більш хитрими та безжальними експлуататорами, ніж люди. На чолі з Наполеоном (алегорія на Сталіна), вони встановлюють диктатуру, переписують історію, використовують пропаганду та терор для утримання контролю. Знаменитий лозунг «Усі тварини рівні» поступово трансформується в «Усі тварини рівні, але деякі рівніші за інших». «Колгосп тварин» – це позачасове попередження про небезпеку зловживання владою, маніпуляції та зради революційних ідеалів. Книга легко читається, але залишає глибокий слід, змушуючи аналізувати політичні процеси.",
         "англійська", 144, "D:\\projects\\DB_Kurs\\QtAPP\\cover_img\\Animal_Farm.jpg", {"Orwell"}, "Сучасна проза"},
        {"Harry Potter and the Philosopher's Stone", "978-0-7475-3269-9", QDate(1997, 6, 26), "Bloomsbury", 350.00, 80,
         "«Гаррі Поттер і філософський камінь» – перша книга з неймовірно популярної серії Дж. К. Роулінг, яка відкрила двері у чарівний світ для мільйонів читачів по всьому світу. Історія починається зі знайомства з Гаррі Поттером, хлопчиком-сиротою, який живе зі своїми жорстокими родичами Дурслями. У свій одинадцятий день народження Гаррі дізнається шокуючу правду: він – чарівник, і його чекає навчання у Гоґвортсі, школі чарів і чаклунства. Разом зі своїми новими друзями, Роном Візлі та Герміоною Ґрейнджер, Гаррі поринає у світ магії, квідичу, таємничих заклять та дивовижних істот. Однак радість навчання затьмарюється зловісною таємницею, пов'язаною з філософським каменем – легендарним артефактом, що дарує безсмертя. Гаррі та його друзям доведеться розгадати загадку і протистояти темним силам, які прагнуть заволодіти каменем. Ця книга – захоплива пригода, сповнена дружби, сміливості, гумору та магії, яка закладає фундамент для всієї епічної саги про хлопчика, який вижив.",
         "англійська", 223, "D:\\projects\\DB_Kurs\\QtAPP\\cover_img\\Harry Potter and the Philosopher's Stone.jpg", {"Rowling"}, "Фентезі"}, // Note: Publisher not in list
        {"The Shining", "978-0-385-12167-5", QDate(1977, 1, 28), "Doubleday", 280.00, 65,
         "«Сяйво» Стівена Кінга – це культовий роман жахів, що занурює читача в атмосферу ізоляції, божевілля та надприродного терору. Джек Торренс, письменник-початківець, який бореться з алкоголізмом та власними демонами, отримує роботу зимового доглядача у віддаленому готелі «Оверлук» у Скелястих горах Колорадо. Разом із дружиною Венді та маленьким сином Денні, який володіє екстрасенсорним даром, відомим як «сяйво», Джек сподівається знайти спокій та натхнення для написання п'єси. Однак готель, відрізаний від світу сніговими заметами, має власну темну історію та зловісну енергетику. Привиди минулого починають переслідувати мешканців, а надприродні сили готелю впливають на Джека, поступово доводячи його до божевілля. Денні, завдяки своєму «сяйву», бачить жахливі видіння та відчуває наростаючу загрозу. «Сяйво» – це майстерно написаний психологічний трилер, що досліджує теми залежності, насильства в сім'ї та боротьби людини з внутрішньою темрявою, підсиленою зловісним місцем.",
         "англійська", 447, "D:\\projects\\DB_Kurs\\QtAPP\\cover_img\\The_Shining.jpg", {"King"}, "Жахи"}, // Note: Publisher not in list
        {"It", "978-0-670-81302-5", QDate(1986, 9, 15), "Viking", 450.00, 45,
         "«Воно» Стівена Кінга – це монументальний епічний роман жахів, який став одним із найвідоміших творів автора. Історія розгортається у двох часових площинах у вигаданому містечку Деррі, штат Мен. У 1958 році семеро друзів-підлітків, які називають себе «Клубом Невдах», стикаються зі стародавнім космічним злом, що живе під містом і кожні 27 років пробуджується, щоб харчуватися страхами та життями дітей. Це зло приймає різні форми, найчастіше – моторошного клоуна Пеннівайза. Дітям вдається перемогти Воно, але вони дають клятву повернутися, якщо зло коли-небудь знову з'явиться. Через 27 років, у 1985 році, жахливі вбивства в Деррі починаються знову. Майк Генлон, єдиний з «Невдах», хто залишився в місті, скликає своїх друзів дитинства, які вже стали дорослими і майже забули про події минулого. Їм доведеться знову об'єднатися, подолати власні страхи та вступити у фінальну битву з Воно. Це глибока історія про дружбу, травми дитинства, силу пам'яті та боротьбу добра зі злом.",
         "англійська", 1138, "D:\\projects\\DB_Kurs\\QtAPP\\cover_img\\it.jpg", {"King"}, "Жахи"}, // Note: Publisher not in list
        {"Norwegian Wood", "978-0-375-70402-4", QDate(1987, 1, 1), "Vintage International", 240.00, 70,
         "«Норвезький ліс» Харукі Муракамі – це ностальгічний та меланхолійний роман про дорослішання, перше кохання, втрату та пошук себе на тлі студентських протестів у Токіо кінця 1960-х років. Головний герой, Тоору Ватанабе, згадує свої студентські роки та складні стосунки з двома дівчатами: Наоко, емоційно тендітною подругою його найкращого друга Кідзукі, який скоїв самогубство, та Мідорі, жвавою, незалежною та ексцентричною однокурсницею. Роман досліджує теми психічного здоров'я, сексуальності, смерті та складності людських взаємин. Ватанабе розривається між своїм обов'язком перед Наоко, яка бореться з глибокою депресією, та потягом до Мідорі, яка уособлює життя та надію. Муракамі майстерно передає атмосферу епохи, настрої молоді, їхні пошуки сенсу та кохання. Назва роману відсилає до однойменної пісні The Beatles, яка стає лейтмотивом твору, підкреслюючи його ностальгійний та сумний настрій. Це глибоко особиста та емоційна історія, яка залишає тривале враження.",
         "англійська", 296, "D:\\projects\\DB_Kurs\\QtAPP\\cover_img\\norwedianWood.jpg", {"Murakami"}, "Сучасна проза"}, // Note: Publisher not in list
        {"American Gods", "978-0-380-97365-1", QDate(2001, 6, 19), "HarperCollins", 320.00, 50,
         "«Американські боги» Ніла Геймана – це масштабний фентезійний роман, що поєднує елементи міфології, дорожньої пригоди та соціальної сатири. Головний герой, Тінь Мун, виходить із в'язниці на кілька днів раніше через раптову смерть дружини. Дорогою на похорон він зустрічає загадкового старого на ім'я Містер Середа, який пропонує Тіні роботу охоронця. Погодившись, Тінь опиняється втягнутим у прихований світ, де старі боги з міфологій усього світу, привезені до Америки іммігрантами протягом століть, живуть серед людей, втрачаючи свою силу через брак віри. Містер Середа, який насправді є скандинавським богом Одіном, збирає старих богів для епічної битви проти нових американських богів – уособлень технологій, медіа, грошей та сучасної культури. Тінь подорожує Америкою разом із Середою, зустрічаючи дивовижних персонажів та стаючи свідком дивних подій. Роман досліджує теми віри, ідентичності, імміграції та самої душі Америки. Це захоплива, багатошарова історія, сповнена оригінальних ідей та незабутніх образів.",
         "англійська", 465, "D:\\projects\\DB_Kurs\\QtAPP\\cover_img\\American Gods.jpg", {"Gaiman"}, "Фентезі"},
        {"The Handmaid's Tale", "978-0-385-49081-8", QDate(1985, 1, 1), "McClelland and Stewart", 270.00, 75,
         "«Оповідь служниці» Маргарет Етвуд – це потужний і тривожний антиутопічний роман, що змальовує тоталітарне теократичне суспільство Гілеад, яке виникло на території колишніх Сполучених Штатів Америки після державного перевороту. В умовах різкого падіння народжуваності режим позбавляє жінок усіх прав, класифікуючи їх за репродуктивною функцією. Головна героїня, Оффред (буквально «належить Фреду»), є Служницею – однією з небагатьох фертильних жінок, змушених служити Командорам та їхнім безплідним Дружинам, виношуючи для них дітей. Роман ведеться від першої особи Оффред, яка згадує своє минуле життя, коли вона мала ім'я, родину та свободу, і описує своє теперішнє існування, сповнене страху, приниження та боротьби за виживання. Етвуд майстерно створює гнітючу атмосферу суспільства, де панує релігійний фундаменталізм, мізогінія та постійний нагляд. «Оповідь служниці» – це гостра критика політичних та соціальних тенденцій, що досліджує теми жіночої ідентичності, репродуктивних прав, влади та опору.",
         "англійська", 311, "D:\\projects\\DB_Kurs\\QtAPP\\cover_img\\The Handmaid's Tale.jpg", {"Atwood"}, "Наукова фантастика"}, // Note: Publisher not in list
        {"Sapiens: A Brief History of Humankind", "978-0-06-231609-7", QDate(2011, 1, 1), "HarperCollins", 400.00, 90,
         "«Sapiens: Людина розумна. Коротка історія людства» Юваля Ноя Харарі – це захоплива науково-популярна книга, що пропонує масштабний огляд історії нашого виду від появи Homo sapiens у Східній Африці до політичних та технологічних революцій XXI століття. Харарі досліджує ключові моменти еволюції людства: когнітивну революцію, яка дозволила нам спілкуватися та створювати складні соціальні структури; аграрну революцію, що призвела до осілого способу життя та виникнення цивілізацій; об'єднання людства через гроші, релігії та імперії; та наукову революцію, яка кардинально змінила наше розуміння світу та наші можливості. Автор розглядає, як біологія та історія визначили наше сьогодення, і ставить провокаційні питання про наше майбутнє: куди ми рухаємося як вид? Чи зробили нас технологічні досягнення щасливішими? Які виклики чекають на нас попереду? Написана доступною мовою, книга поєднує знання з історії, біології, антропології та економіки, пропонуючи свіжий та глибокий погляд на те, що означає бути людиною.",
         "англійська", 464, "D:\\projects\\DB_Kurs\\QtAPP\\cover_img\\Sapiens.jpg", {"Harari"}, "Науково-популярне"},
        {"The Last Wish (The Witcher)", "978-0-316-43896-9", QDate(1993, 1, 1), "Orbit", 290.00, 60,
         "«Останнє бажання» – перша книга з легендарної фентезійної саги «Відьмак» польського письменника Анджея Сапковського. Це збірка оповідань, що знайомить читача з головним героєм – Ґеральтом з Рівії, професійним мисливцем на монстрів, відьмаком. У цьому похмурому, морально неоднозначному світі, натхненному слов'янською міфологією та класичними казками, Ґеральт подорожує, виконуючи небезпечні замовлення: вбиває чудовиськ, знімає прокляття та розплутує складні інтриги. Оповідання майстерно переплітають захопливі бойові сцени, детективні елементи та глибокі філософські роздуми про природу зла, вибір та ціну нейтралітету. Сапковський деконструює знайомі казкові сюжети, надаючи їм реалістичності та дорослого погляду. Ми зустрічаємо харизматичних персонажів, таких як чародійка Йеннефер та бард Любисток, які стануть важливими фігурами у подальшій долі Ґеральта. «Останнє бажання» – це чудовий вступ у світ Відьмака, сповнений пригод, чорного гумору та складних моральних дилем.",
         "англійська", 400, "D:\\projects\\DB_Kurs\\QtAPP\\cover_img\\The Last Wish (The Witcher).jpg", {"Sapkowski"}, "Фентезі"}, // Note: Publisher not in list
        {"The Hobbit", "978-0-547-92822-7", QDate(1937, 9, 21), "Houghton Mifflin Harcourt", 220.00, 110,
         "«Гобіт, або Туди і звідти» Дж. Р. Р. Толкіна – це чарівна та захоплива казкова повість, яка стала прелюдією до монументального «Володаря Перснів». Книга розповідає про неймовірні пригоди Більбо Беггінса, поважного гобіта, який понад усе цінує домашній затишок та спокійне життя у своїй нірці під пагорбом. Однак його життя кардинально змінюється, коли до нього несподівано навідується чарівник Ґандальф та тринадцять гномів на чолі з Торіном Дубощитом. Вони вмовляють Більбо приєднатися до їхньої небезпечної експедиції – походу до Самотньої Гори, щоб повернути скарби гномів, захоплені жахливим драконом Смауґом. Неохоче погодившись, Більбо вирушає у подорож, сповнену небезпек та дивовижних зустрічей. Він стикається з тролями, гоблінами, гігантськими павуками, ельфами та людьми, проявляючи несподівану для себе сміливість та кмітливість. Саме під час цієї подорожі Більбо знаходить таємничий Перстень. «Гобіт» – це класика дитячої літератури, яка однаково захоплює і дорослих своєю атмосферою, гумором та мудрістю.",
         "англійська", 310, "D:\\projects\\DB_Kurs\\QtAPP\\cover_img\\The Hobbit.jpg", {"Tolkien"}, "Фентезі"}, // Note: Publisher not in list
        {"The Lord of the Rings", "978-0-618-26027-9", QDate(1954, 7, 29), "Allen & Unwin", 600.00, 40,
         "«Володар Перснів» Дж. Р. Р. Толкіна – це епохальний шедевр фентезі, одна з найвизначніших книг XX століття, що створила цілий всесвіт Середзем'я. Роман є продовженням повісті «Гобіт» і розповідає про Велику війну за Перстень Всевладдя, створений Темним Володарем Сауроном для підкорення вільних народів Середзем'я. Головний герой – молодий гобіт Фродо Беггінс, племінник Більбо, отримує у спадок той самий Перстень і дізнається про його жахливу силу та призначення. Разом із вірними друзями-гобітами, чарівником Ґандальфом, спадкоємцем трону Ґондору Араґорном, ельфом Леґоласом, гномом Ґімлі та представником людей Боромиром, Фродо вирушає у небезпечну подорож до Мордору – єдиного місця, де Перстень може бути знищений у вогні Фатальної Гори. Їхній шлях сповнений випробувань, битв, зрад та героїчних вчинків. Толкін створив неймовірно деталізований світ з власною історією, мовами, народами та міфологією. «Володар Перснів» – це глибока алегорія боротьби добра зі злом, історія про дружбу, відвагу, самопожертву та надію.",
         "англійська", 1178, "D:\\projects\\DB_Kurs\\QtAPP\\cover_img\\The Lord of the Rings.jpg", {"Tolkien"}, "Фентезі"} // Note: Publisher not in list
    };


    // Хранилища для ID (використовуємо Map для зручного пошуку)
    QMap<QString, int> publisherNameToId;
    QMap<QString, int> authorLastNameToId; // Увага: спрощення, може бути не унікальним!
    QVector<int> customerIds; // Залишаємо для клієнтів
    QVector<int> bookIds;     // Буде заповнено реальними ID книг
    QVector<double> bookPrices; // Зберігаємо ціни для order_item
    QVector<int> orderIds;    // Залишаємо для замовлень


    // --- Заполнение таблиц ---

    // 1. Publishers (Вставка реальних видавців)
    qInfo() << "Populating table publisher with real data...";
    QString insertPublisherSQL = R"(
         INSERT INTO publisher (name, contact_info) VALUES (:name, :contact_info)
         RETURNING publisher_id;
     )";
    if (!query.prepare(insertPublisherSQL)) {
        qCritical() << "Error preparing query for publisher:" << query.lastError().text();
        success = false;
    } else {
        for (PublisherData &pub : publishers) {
            query.bindValue(":name", pub.name);
            query.bindValue(":contact_info", pub.contactInfo);
            // Використовуємо dbManager->executeInsertQuery
            if (dbManager->executeInsertQuery(query, QString("Publisher %1").arg(pub.name), lastId)) {
                pub.dbId = lastId.toInt();
                publisherNameToId[pub.name] = pub.dbId;
            } else {
                // Перевірка на дублікат (якщо запускаємо повторно без очищення)
                 if (query.lastError().text().contains("duplicate key value violates unique constraint")) {
                    qWarning() << "Publisher" << pub.name << "already exists. Fetching ID...";
                    QSqlQuery fetchQuery(dbManager->m_db); // Використовуємо з'єднання з dbManager
                    fetchQuery.prepare("SELECT publisher_id FROM publisher WHERE name = :name");
                    fetchQuery.bindValue(":name", pub.name);
                    if (fetchQuery.exec() && fetchQuery.next()) {
                        pub.dbId = fetchQuery.value(0).toInt();
                        publisherNameToId[pub.name] = pub.dbId;
                        qInfo() << "Found existing Publisher ID:" << pub.dbId;
                    } else {
                         qCritical() << "Failed to fetch existing publisher ID for" << pub.name << ":" << fetchQuery.lastError().text();
                         success = false;
                         break;
                    }
                } else {
                    success = false; // Інша помилка є критичною
                    break;
                }
            }
        }
    }

    // 2. Authors (Вставка реальних авторів)
    if (success) {
        qInfo() << "Populating table author with real data...";
        QString insertAuthorSQL = R"(
             INSERT INTO author (first_name, last_name, birth_date, nationality, image_path, biography)
             VALUES (:first_name, :last_name, :birth_date, :nationality, :image_path, :biography)
             RETURNING author_id;
         )"; // Додано image_path та biography
        if (!query.prepare(insertAuthorSQL)) {
            qCritical() << "Error preparing query for author:" << query.lastError().text();
            success = false;
        } else {
            for (AuthorData &auth : authors) {
                query.bindValue(":first_name", auth.firstName);
                query.bindValue(":last_name", auth.lastName);
               query.bindValue(":birth_date", auth.birthDate.isValid() ? QVariant(auth.birthDate) : QVariant(QVariant::Date));
               query.bindValue(":nationality", auth.nationality);
               query.bindValue(":image_path", auth.imagePath.isEmpty() ? QVariant(QVariant::String) : auth.imagePath); // Додано прив'язку image_path
               query.bindValue(":biography", auth.biography.isEmpty() ? QVariant(QVariant::String) : auth.biography); // Додано прив'язку biography

               // Використовуємо dbManager->executeInsertQuery
               if (dbManager->executeInsertQuery(query, QString("Author %1 %2").arg(auth.firstName, auth.lastName), lastId)) {
                    auth.dbId = lastId.toInt();
                    // Увага: ключ - прізвище. Якщо є однакові, буде перезаписано!
                    authorLastNameToId[auth.lastName] = auth.dbId;
                } else {
                    // Припускаємо, що автори унікальні і помилка вставки є критичною
                    success = false;
                    break;
                }
            }
        }
    }

    // 3. Books and Book_Author (Вставка реальних книг та зв'язків)
    if (success) {
        qInfo() << "Populating table book and book_author with real data...";
        // Переконуємось, що 'description' є в списку стовпців
        QString insertBookSQL = R"(
             INSERT INTO book (title, isbn, publication_date, publisher_id, price, stock_quantity, description, language, page_count, cover_image_path, genre)
             VALUES (:title, :isbn, :publication_date, :publisher_id, :price, :stock_quantity, :description, :language, :page_count, :cover_image_path, :genre)
             RETURNING book_id;
         )";
         QString insertBookAuthorSQL = R"(
             INSERT INTO book_author (book_id, author_id) VALUES (:book_id, :author_id);
         )"; // Спрощено, без ролі

        QSqlQuery bookQuery(dbManager->m_db); // Окремий запит для книг
        QSqlQuery bookAuthorQuery(dbManager->m_db); // Окремий запит для зв'язків

        if (!bookQuery.prepare(insertBookSQL)) {
             qCritical() << "Error preparing query for book:" << bookQuery.lastError().text();
             success = false;
        }
        if (!bookAuthorQuery.prepare(insertBookAuthorSQL)) {
             qCritical() << "Error preparing query for book_author:" << bookAuthorQuery.lastError().text();
             success = false;
        }

        if(success) {
            for (BookData &book : books) {
                // Знайти ID видавця
                if (publisherNameToId.contains(book.publisherName)) {
                    book.publisherDbId = publisherNameToId.value(book.publisherName);
                } else {
                    qWarning() << "Publisher '" << book.publisherName << "' for book '" << book.title << "' not found in the database. Setting publisher_id to NULL.";
                    book.publisherDbId = -1; // Або інше значення для NULL
                }

                // Знайти ID авторів
                book.authorDbIds.clear();
                for (const QString &lastName : book.authorLastNames) {
                    if (authorLastNameToId.contains(lastName)) {
                        book.authorDbIds.append(authorLastNameToId.value(lastName));
                    } else {
                        qWarning() << "Author with last name '" << lastName << "' for book '" << book.title << "' not found. Skipping author link.";
                    }
                }

                // Вставити книгу
                bookQuery.bindValue(":title", book.title);
                bookQuery.bindValue(":isbn", book.isbn);
                bookQuery.bindValue(":publication_date", book.publicationDate.isValid() ? QVariant(book.publicationDate) : QVariant(QVariant::Date));
                // Обробка NULL для publisher_id
                if (book.publisherDbId != -1) {
                     bookQuery.bindValue(":publisher_id", book.publisherDbId);
                } else {
                     bookQuery.bindValue(":publisher_id", QVariant(QVariant::Int)); // Вставка NULL
                }
                bookQuery.bindValue(":price", book.price);
                bookQuery.bindValue(":stock_quantity", book.stockQuantity);
                bookQuery.bindValue(":description", book.description.isEmpty() ? QVariant(QVariant::String) : book.description); // Прив'язуємо опис (з перевіркою на порожній рядок)
                bookQuery.bindValue(":language", book.language);
                bookQuery.bindValue(":page_count", book.pageCount);
                bookQuery.bindValue(":cover_image_path", book.coverImagePath.isEmpty() ? QVariant(QVariant::String) : book.coverImagePath);
                bookQuery.bindValue(":genre", book.genre.isEmpty() ? QVariant(QVariant::String) : book.genre); // Додано прив'язку жанру

                // Використовуємо dbManager->executeInsertQuery
                if (dbManager->executeInsertQuery(bookQuery, QString("Book %1").arg(book.title), lastId)) {
                    book.dbId = lastId.toInt();
                    bookIds.append(book.dbId); // Зберігаємо ID для замовлень
                    bookPrices.append(book.price); // Зберігаємо ціну

                    // Вставити зв'язки книга-автор
                    if (!book.authorDbIds.isEmpty()) {
                        for (int authorId : book.authorDbIds) {
                            bookAuthorQuery.bindValue(":book_id", book.dbId);
                            bookAuthorQuery.bindValue(":author_id", authorId);
                            if (!bookAuthorQuery.exec()) {
                                // Перевірка на дублікат зв'язку
                                if (bookAuthorQuery.lastError().text().contains("duplicate key value violates unique constraint")) {
                                     qWarning() << "Book-author link (" << book.dbId << "," << authorId << ") already exists. Skipping.";
                                } else {
                                     qCritical() << "Error inserting book_author link:" << bookAuthorQuery.lastError().text();
                                     qCritical() << "Values:" << book.dbId << authorId;
                                     success = false;
                                     break; // Зупиняємо вставку зв'язків для цієї книги
                                }
                            }
                        }
                    }
                } else {
                     // Перевірка на дублікат ISBN
                    if (bookQuery.lastError().text().contains("duplicate key value violates unique constraint")) {
                         qWarning() << "Book with ISBN" << book.isbn << "already exists. Skipping insertion.";
                         // Можна спробувати знайти існуючу книгу і її ID, якщо потрібно
                    } else {
                        success = false; // Інша помилка критична
                    }
                }
                if (!success) break; // Зупиняємо весь процес, якщо була помилка
            }
        }
    }


    // 4. Customer (Генерація тестових клієнтів з паролями)
    if (success) {
        qInfo() << "Populating table customer (generating test data with passwords)...";
        QString insertCustomerSQL = R"(
        INSERT INTO customer (first_name, last_name, email, phone, address, password_hash, loyalty_program, join_date, loyalty_points)
        VALUES (:first_name, :last_name, :email, :phone, :address, :password_hash, :loyalty_program, :join_date, :loyalty_points)
        RETURNING customer_id;
    )"; // Додано password_hash
    if (!query.prepare(insertCustomerSQL)) {
        qCritical() << "Error preparing query for customer:" << query.lastError().text(); // Changed log to English
        success = false;
    } else {
        for (int i = 0; i < numberOfRecords && success; ++i) {
            QString fname = firstNames.at(QRandomGenerator::global()->bounded(firstNames.size()));
            QString lname = lastNames.at(QRandomGenerator::global()->bounded(lastNames.size()));
            query.bindValue(":first_name", fname);
            query.bindValue(":last_name", lname);
            query.bindValue(":email", QString("%1.%2.%3@example.com").arg(fname.toLower()).arg(lname.toLower()).arg(i)); // Уникальный email
            query.bindValue(":phone", QString("+380%1%2%3").arg(QRandomGenerator::global()->bounded(10, 100))
                                          .arg(QRandomGenerator::global()->bounded(100, 1000))
                                          .arg(QRandomGenerator::global()->bounded(1000, 10000)));
            query.bindValue(":address", QString("%1, %2, буд. %3, кв. %4")
                                            .arg(cities.at(QRandomGenerator::global()->bounded(cities.size())))
                                            .arg(streets.at(QRandomGenerator::global()->bounded(streets.size())))
                                            .arg(QRandomGenerator::global()->bounded(1, 151))
                                            .arg(QRandomGenerator::global()->bounded(1, 301)));
            query.bindValue(":loyalty_program", QRandomGenerator::global()->bounded(10) < 3); // ~30% в программе
            query.bindValue(":join_date", randomDate(QDate::currentDate().addYears(-5), QDate::currentDate()));
            query.bindValue(":loyalty_points", QRandomGenerator::global()->bounded(0, 501));

            // Генерація та хешування пароля (приклад: "password" + email)
            QString plainPassword = "password" + query.boundValue(":email").toString();
            QByteArray passwordHashBytes = QCryptographicHash::hash(plainPassword.toUtf8(), QCryptographicHash::Sha256);
            QString passwordHashHex = QString::fromUtf8(passwordHashBytes.toHex()); // Перетворюємо в QString
            query.bindValue(":password_hash", passwordHashHex); // Прив'язуємо QString

            // Використовуємо dbManager->executeInsertQuery
            if (dbManager->executeInsertQuery(query, QString("Customer %1").arg(i+1), lastId)) {
                customerIds.append(lastId.toInt());
                // Цей рядок виводить email та пароль у лог при генерації даних
                qDebug() << "Generated customer" << query.boundValue(":email").toString() << "with password:" << plainPassword; // Тільки для тестування!
            } else {
                success = false;
            }
        }
    }
    } // <- Добавлена недостающая скобка для закрытия 'if (success)' для Customer


    // 5. "order" (Генерація тестових замовлень)
    if (success && !customerIds.isEmpty()) {
        qInfo() << "Populating table \"order\" (generating test data)...";
        QString insertOrderSQL = R"(
             INSERT INTO "order" (customer_id, order_date, total_amount, shipping_address, payment_method)
             VALUES (:customer_id, :order_date, :total_amount, :shipping_address, :payment_method)
             RETURNING order_id;
         )"; // Added RETURNING
        // Note the quotes around "order" in the SQL query!
        if (!query.prepare(insertOrderSQL)) {
            qCritical() << "Error preparing query for \"order\":" << query.lastError().text(); // Changed log to English
            success = false;
        } else {
            for (int i = 0; i < numberOfRecords && success; ++i) {
                query.bindValue(":customer_id", customerIds.at(QRandomGenerator::global()->bounded(customerIds.size())));
                query.bindValue(":order_date", randomDateTime(QDateTime::currentDateTime().addDays(-90), QDateTime::currentDateTime()));
                query.bindValue(":total_amount", 500); // Сумма будет пересчитана позже, это плейсхолдер
                query.bindValue(":shipping_address", QString("%1, %2, буд. %3, Нова Пошта %4")
                                                         .arg(cities.at(QRandomGenerator::global()->bounded(cities.size())))
                                                         .arg(streets.at(QRandomGenerator::global()->bounded(streets.size())))
                                                         .arg(QRandomGenerator::global()->bounded(1, 151))
                                                         .arg(QRandomGenerator::global()->bounded(1, 51)));
                query.bindValue(":payment_method", paymentMethods.at(QRandomGenerator::global()->bounded(paymentMethods.size())));

                // Використовуємо dbManager->executeInsertQuery
                if (dbManager->executeInsertQuery(query, QString("Order %1").arg(i+1), lastId)) {
                    orderIds.append(lastId.toInt());
                } else {
                    success = false;
                }
            }
        }
    } else if (customerIds.isEmpty()) {
        qWarning() << "Пропуск заповнення 'order', оскільки немає клієнтів (customer).";
    }

    // 6. order_item (Генерація позицій замовлення з РЕАЛЬНИМИ книгами)
    if (success && !orderIds.isEmpty() && !bookIds.isEmpty()) {
        qInfo() << "Populating table order_item (using real books)...";
        QString insertOrderItemSQL = R"(
             INSERT INTO order_item (order_id, book_id, quantity, price_per_unit)
             VALUES (:order_id, :book_id, :quantity, :price_per_unit);
         )";
        if (!query.prepare(insertOrderItemSQL)) {
            qCritical() << "Помилка підготовки запиту для order_item:" << query.lastError().text();
            success = false;
        } else {
            QMap<int, double> orderTotals; // Для пересчета total_amount в заказе
            int itemsCreated = 0;
            for (int orderId : orderIds) { // Для каждого заказа добавим 1-4 позиции
                int itemsCount = QRandomGenerator::global()->bounded(1, 5); // 1-4 книги в заказе
                QSet<int> booksInOrder; // Книги в текущем заказе
                for (int j = 0; j < itemsCount && success; ++j) {
                    int bookId = bookIds.at(QRandomGenerator::global()->bounded(bookIds.size()));
                    if (booksInOrder.contains(bookId)) continue; // Не додаємо одну й ту саму книгу двічі

                    int quantity = QRandomGenerator::global()->bounded(1, 4); // 1-3 шт.
                    // Беремо реальну ціну книги зі збереженого списку
                    double price = 0.0;
                    int bookIndex = bookIds.indexOf(bookId); // Знаходимо індекс книги
                    if (bookIndex != -1 && bookIndex < bookPrices.size()) {
                        price = bookPrices.at(bookIndex);
                    } else {
                        qWarning() << "Could not find price for book ID" << bookId << "in order" << orderId << ". Using 0.0.";
                    }


                    query.bindValue(":order_id", orderId);
                    query.bindValue(":book_id", bookId); // Використовуємо ID реальної книги
                    query.bindValue(":quantity", quantity);
                    query.bindValue(":price_per_unit", price);

                    // Execute the prepared query directly
                    if (query.exec()) {
                        orderTotals[orderId] += quantity * price; // Sum up the cost
                        booksInOrder.insert(bookId);
                        itemsCreated++;
                    } else {
                        qCritical().noquote() << QString("Error executing prepared INSERT (OrderItem %1):").arg(itemsCreated + 1);
                        qCritical() << query.lastError().text();
                        qCritical() << "Bound values:" << query.boundValues();
                        success = false; // Any error here is critical
                    }
                }
                if (itemsCreated >= numberOfRecords * 2.5) break; // Ограничение
            }
            qInfo() << "Created" << itemsCreated << "order items."; // Changed log to English

            // Обновляем total_amount в таблице "order"
            qInfo() << "Updating total_amount in table \"order\"..."; // Changed log to English
            QString updateOrderTotalSQL = R"(UPDATE "order" SET total_amount = :total WHERE order_id = :id;)";
            if (!query.prepare(updateOrderTotalSQL)) {
                qCritical() << "Error preparing query for updating total_amount:" << query.lastError().text(); // Changed log to English
                success = false;
            } else {
                for (auto it = orderTotals.constBegin(); it != orderTotals.constEnd() && success; ++it) {
                    query.bindValue(":total", it.value());
                    query.bindValue(":id", it.key());
                    // Execute the prepared query directly
                    if (!query.exec()) {
                         qCritical().noquote() << QString("Error executing prepared UPDATE (Update Order Total %1):").arg(it.key()); // Changed log to English
                         qCritical() << query.lastError().text();
                         qCritical() << "Bound values:" << query.boundValues();
                         success = false; // Changed log to English
                    }
                }
            }
        }
    } else if (bookIds.isEmpty()) {
         qWarning() << "Skipping order_item population because no books were added.";
    }


    // 7. order_status (Генерація статусів замовлень, як раніше)
    if (success && !orderIds.isEmpty()) {
        qInfo() << "Populating table order_status (generating test data)...";
        QString insertOrderStatusSQL = R"(
            INSERT INTO order_status (order_id, status, status_date, tracking_number)
            VALUES (:order_id, :status, :status_date, :tracking_number);
        )";
        if (!query.prepare(insertOrderStatusSQL)) {
            qCritical() << "Помилка підготовки запиту для order_status:" << query.lastError().text();
            success = false;
        } else {
            int statusesCreated = 0;
            for (int orderId : orderIds) { // Для каждого заказа добавим 1-3 статуса
                int statusCount = QRandomGenerator::global()->bounded(1, 4);
                QDateTime lastStatusDate = QDateTime::currentDateTime().addDays(-91); // Начальная дата для статуса

                // Получим дату создания заказа, чтобы статусы были после нее
                QSqlQuery dateQuery(dbManager->m_db); // Використовуємо з'єднання з dbManager
                dateQuery.prepare(R"(SELECT order_date FROM "order" WHERE order_id = :id)");
                dateQuery.bindValue(":id", orderId);
                if (dateQuery.exec() && dateQuery.next()) {
                    lastStatusDate = dateQuery.value(0).toDateTime();
                }


                for (int j = 0; j < statusCount && success; ++j) {
                    QString status = orderStatuses.at(QRandomGenerator::global()->bounded(orderStatuses.size()));
                    QDateTime statusDate = randomDateTime(lastStatusDate.addSecs(3600), // Минимум через час после предыдущего
                                                          lastStatusDate.addDays(5).addSecs(86400)); // Максимум через 5 дней
                    QString tracking = (status == "Надіслано" || status == "Доставлено")
                                           ? QString("59000%1").arg(QRandomGenerator::global()->bounded(10000000, 99999999))
                                           : QVariant(QVariant::String).toString(); // Пустой трекинг для других статусов

                    query.bindValue(":order_id", orderId);
                    query.bindValue(":status", status);
                    query.bindValue(":status_date", statusDate);
                    query.bindValue(":tracking_number", tracking.isEmpty() ? QVariant(QVariant::String) : tracking); // Pass NULL if empty

                    // Execute the prepared query directly
                    if (query.exec()) {
                        lastStatusDate = statusDate; // Update the last status date
                        statusesCreated++;
                    } else {
                        qCritical().noquote() << QString("Error executing prepared INSERT (OrderStatus %1):").arg(statusesCreated + 1);
                        qCritical() << query.lastError().text();
                        qCritical() << "Bound values:" << query.boundValues();
                        success = false;
                    }
                }
                if (statusesCreated >= numberOfRecords * 2) break; // Ограничение
            }
            qInfo() << "Created" << statusesCreated << "order statuses."; // Changed log to English
        }
    }

    // 8. comment (Генерація тестових коментарів)
    if (success && !bookIds.isEmpty() && !customerIds.isEmpty()) {
        qInfo() << "Populating table comment (generating test data)...";
        QString insertCommentSQL = R"(
            INSERT INTO comment (book_id, customer_id, comment_text, comment_date, rating)
            VALUES (:book_id, :customer_id, :comment_text, :comment_date, :rating);
        )";
        if (!query.prepare(insertCommentSQL)) {
            qCritical() << "Помилка підготовки запиту для comment:" << query.lastError().text();
            success = false;
        } else {
            int commentsCreated = 0;
            int targetCommentCount = numberOfRecords * 3; // Спробуємо створити більше коментарів
            QStringList sampleComments = {
                "Чудова книга!", "Дуже сподобалось.", "Рекомендую!", "Неймовірна історія.",
                "Захоплює з перших сторінок.", "Не міг відірватися.", "Варто прочитати.",
                "Глибокий зміст.", "Цікавий сюжет.", "Добре написано.", "Непогано.",
                "Очікував більшого.", "На один раз.", "Не дуже вразило.", "Спірно."
            };

            for (int i = 0; i < targetCommentCount && success; ++i) {
                int bookId = bookIds.at(QRandomGenerator::global()->bounded(bookIds.size()));
                int customerId = customerIds.at(QRandomGenerator::global()->bounded(customerIds.size()));
                QString commentText = sampleComments.at(QRandomGenerator::global()->bounded(sampleComments.size()));
                QDateTime commentDate = randomDateTime(QDateTime::currentDateTime().addDays(-180), QDateTime::currentDateTime());
                int rating = QRandomGenerator::global()->bounded(0, 6); // 0-5

                query.bindValue(":book_id", bookId);
                query.bindValue(":customer_id", customerId);
                query.bindValue(":comment_text", commentText);
                query.bindValue(":comment_date", commentDate);
                query.bindValue(":rating", rating == 0 ? QVariant(QVariant::Int) : rating); // NULL if 0

                if (query.exec()) {
                    commentsCreated++;
                } else {
                    qCritical().noquote() << QString("Error executing prepared INSERT (Comment %1):").arg(commentsCreated + 1);
                    qCritical() << query.lastError().text();
                    qCritical() << "Bound values:" << query.boundValues();
                    success = false; // Any error here is critical
                }
            }
             qInfo() << "Created" << commentsCreated << "comments.";
        }
    }


    // Завершуємо транзакцію (використовуємо dbManager->m_db)
    if (success) {
        if (dbManager->m_db.commit()) {
            qInfo() << "Data population transaction committed successfully. Added real books/authors, comments and ~" << numberOfRecords << "customers/orders.";
            return true;
        } else {
            qCritical() << "Error committing data population transaction:" << dbManager->m_db.lastError().text(); // Changed log to English
            dbManager->m_db.rollback();
            return false;
        }
    } else {
        qWarning() << "An error occurred during data population. Rolling back transaction..."; // Changed log to English
        if (!dbManager->m_db.rollback()) {
            qCritical() << "Error rolling back data population transaction:" << dbManager->m_db.lastError().text(); // Changed log to English
        } else {
            qInfo() << "Data population transaction successfully rolled back."; // Changed log to English
        }
        return false;
    } // Closes else block for 'if (success)'
} // Closes populateTestData function body
